@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        <h2>Choose Game Level</h2>
    </div>
    <div class="row">
        @for (int buttonNumber = 1; buttonNumber < 4; buttonNumber++)
        {
            
            <button type="button" class="btn btn-secondary">
                @buttonNumber
            </button>
        }
    </div>
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";


            <div class="col-3">

                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    @*/*tring to use to animalIconshow to store the showing state, if true, show animal string, else,show empty string, but the button still got information*/*@
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound/8</h2>
    </div>
    <div class="row">
        <h2>Mistake(s): @mistakes</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="row">
        <h2>Best Time: @bestTimeToDisplay</h2>
    </div>
    <div class="row">
        @if (playButtonShow)
        {
            <button @onclick="@(() => PlayButtonClick())">
                <h3>Play Again</h3>
            </button>
        }
        else
        {
            <button @onclick="@(() => PlayButtonClick())">
                <h3>Start Game</h3>
            </button>
        }
    </div>
</div>

@code {
    List<string> animalEmoji = new List<string>()
{
        "🐶", "🐶",
        "🐱", "🐱",
        "🐰", "🐰",
        "🐨", "🐨",
        "🐷", "🐷",
        "🐻", "🐻",
        "🦊", "🦊",
        "🐯", "🐯",
    };

    List<string> shuffledAnimals = new List<string>();
    int matchesFound = 0;
    // count mistakes
    int mistakes = 0;
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    string bestTimeToDisplay;
    int bestTime = 0;
    bool playButtonShow = false;
    bool animalIconShow = true;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        // Load Game
        //SetUpGame();
    }

    private void SetUpGame()
    {
        animalIconShow = true;
        // Reload new animal list
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();

        // Reset the matches
        matchesFound = 0;

        // Reset the mistakes
        mistakes = 0;

        // Reset the timer
        tenthsOfSecondsElapsed = 0;

        //DRAFT: Try to let the animal icons show 3 secs then disappear
        //FAIL: It stop the whole game from loading, the game will show up with empty grids.
        //System.Threading.Thread.Sleep(3000);

    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {

        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            // timer start when click the first button
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            // Add number of matches that have been found
            matchesFound++;

            // Reload Game if every matches found
            if (matchesFound == 8)
            {

                if ((bestTime == 0) || (tenthsOfSecondsElapsed <= bestTime))
                {
                    bestTime = tenthsOfSecondsElapsed;
                    bestTimeToDisplay = (bestTime / 10F).ToString("0.0s");
                }


                // Stop the timer
                timer.Stop();
                playButtonShow = true;
            }
        }
        else if ((lastAnimalFound == animal) && (animalDescription == lastDescription))
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
        }
        else
        {
            // pair don't match, reset selection.
            lastAnimalFound = string.Empty;
            mistakes++;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {

            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
            .ToString("0.0s");
            StateHasChanged();
        });
    }

    private void PlayButtonClick()
    {
        SetUpGame();
        playButtonShow = false;
    }

}